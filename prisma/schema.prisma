// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum TrackingEventType {
  CLICK
  SCROLL
  PAGEVIEW
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  image     String? // Profile image URL
  role      UserRole @default(USER) // User role
  password  String? // For credentials auth
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts  Account[]
  sessions  Session[]
  
  // Tracking relations
  trackingEvents UserTrackingEvent[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires   DateTime
  @@unique([identifier, token])
}

// === USER TRACKING MODELS ===

model UserTrackingEvent {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  type      TrackingEventType
  timestamp DateTime
  data      Json              // Зберігаємо дані події в JSON форматі
  userId    String?           @db.ObjectId // Опціонально - для авторизованих користувачів
  user      User?             @relation(fields: [userId], references: [id])
  sessionToken String?        // Використовуємо sessionToken з NextAuth Session
  userAgent String?           // User agent браузера
  ipAddress String?           // IP адреса користувача
  browser   String?           // Назва браузера
  browserVersion String?      // Версія браузера
  os        String?           // Операційна система
  osVersion String?           // Версія ОС
  device    String?           // Тип пристрою (Desktop, Mobile, Tablet)
  country   String?           // Країна
  city      String?           // Місто
  region    String?           // Регіон/область
  timezone  String?           // Часова зона
  createdAt DateTime          @default(now())

  @@index([type])
  @@index([userId])
  @@index([sessionToken])
  @@index([timestamp])
  @@index([browser])
  @@index([os])
  @@index([country])
  @@index([device])
}

model PageAnalytics {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  path          String
  title         String?
  viewCount     Int      @default(0)
  uniqueViews   Int      @default(0)
  avgTimeOnPage Float?   // Середній час на сторінці в секундах
  bounceRate    Float?   // Відсоток відмов
  lastVisited   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([path])
  @@index([viewCount])
  @@index([lastVisited])
}

model ClickHeatmap {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  path        String
  elementType String   // button, div, span, etc.
  elementId   String?
  elementClass String?
  x           Int      // X координата кліку
  y           Int      // Y координата кліку
  clickCount  Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([path])
  @@index([elementType])
  @@index([clickCount])
}